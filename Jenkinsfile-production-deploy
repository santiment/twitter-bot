@Library('podTemplateLib')
import net.santiment.utils.podTemplates

slaveTemplates = new podTemplates()

slaveTemplates.dockerTemplate {
  slaveTemplates.kubectlTemplate { label ->
  node(label) {
    stage('Update deployment') {
      git url: 'https://github.com/santiment/twitter-bot'
      def gitCommit = sh(returnStdout: true, script: "git rev-parse HEAD").trim()

      withCredentials([
          string(
            credentialsId: 'aws_account_id',
            variable: 'aws_account_id'
          ),
          file(
            credentialsId: 'production_kubeconfig',
            variable: 'production_kubeconfig'
          )
        ]){

        def awsRegistry = "${env.aws_account_id}.dkr.ecr.eu-central-1.amazonaws.com"
        def sourceImage = "${awsRegistry}/twitter-bot"
        def taggedSource = "${sourceImage}:${gitCommit}"
        def kubectl = "kubectl --kubeconfig='${env.production_kubeconfig}' --context=jenkins"

        /* Deploy the image */

        container('kubectl') {
          sh "${kubectl} version"
          sh "${kubectl} set image deployment/twitter-bot twitter-bot=${taggedSource}"
        }

        /* Tag the deployed image */
        container('docker') {

          def timestampTag = "production-${env.TIMESTAMP_IMAGE_TAG}"
          def taggedProduction = "${sourceImage}:production"
          def timestamped = "${sourceImage}:${timestampTag}"

          docker.withRegistry("https://${awsRegistry}", "ecr:eu-central-1:ecr-credentials") {
            sh "docker pull ${taggedSource}"
            sh "docker tag ${taggedSource} ${taggedProduction}"
            sh "docker tag ${taggedSource} ${timestamped}"
            sh "docker push ${taggedProduction}"
            sh "docker push ${timestamped}"
          }
        }
      }
    }
  }
}
}
